{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"#types","title":"Types","text":"<ul> <li>alias Texture</li> <li>alias color</li> <li>alias gsfont</li> <li>alias timer</li> <li>alias ttf</li> <li>class Camera</li> <li>class Color</li> <li>class Font</li> <li>class Graphics</li> <li>class IOP</li> <li>class Lights</li> <li>class Pads</li> <li>class Render</li> <li>class Screen</li> <li>class System</li> <li>class Timer</li> <li>class cpprog</li> <li>class luadirent</li> <li>class mcinfo</li> <li>enum Filter</li> <li>enum disctypes</li> </ul>"},{"location":"#globals","title":"Globals","text":"<ul> <li>LINEAR</li> <li>NEAREST</li> <li>doesFileExist</li> </ul>"},{"location":"globals/LINEAR/","title":"global LINEAR","text":"<pre><code>LINEAR: integer = 1\n</code></pre>"},{"location":"globals/NEAREST/","title":"global NEAREST","text":"<pre><code>NEAREST: integer = 0\n</code></pre>"},{"location":"globals/doesFileExist/","title":"global doesFileExist","text":"<pre><code>function doesFileExist(F: string) -&gt;  boolean\n</code></pre> <p>Checks for file existence</p>"},{"location":"types/Camera/","title":"class Camera","text":""},{"location":"types/Camera/#methods","title":"methods","text":""},{"location":"types/Camera/#cameraposition","title":"Camera.position","text":"<pre><code>function Camera.position(\n  X: integer,\n  Y: integer,\n  Z: integer\n)\n</code></pre> <p>@param <code>X</code> - Coordinate</p> <p>@param <code>Y</code> - Coordinate</p> <p>@param <code>Z</code> - Coordinate</p> <p>change camera position</p>"},{"location":"types/Camera/#camerarotation","title":"Camera.rotation","text":"<pre><code>function Camera.rotation(\n  X: integer,\n  Y: integer,\n  Z: integer\n)\n</code></pre> <p>@param <code>X</code> - Rotation angle</p> <p>@param <code>Y</code> - Rotation angle</p> <p>@param <code>Z</code> - Rotation angle</p> <p>change camera rotation</p>"},{"location":"types/Color/","title":"class Color","text":""},{"location":"types/Color/#methods","title":"methods","text":""},{"location":"types/Color/#colornew","title":"Color.new","text":"<pre><code>function Color.new(\n  R: integer,\n  G: integer,\n  B: integer,\n  A: integer\n) -&gt; color color\n</code></pre> <p>@param <code>R</code> - RED color [0-255]</p> <p>@param <code>G</code> - BLUE color [0-255]</p> <p>@param <code>B</code> - GREEN color [0-255]</p> <p>@param <code>A</code> - ALPHA Channel [0-128]. optional parameter, if not passed, 128 is assumed (no transparency)</p> <p>@return <code>color</code> - generated color, to be used as color parameter on the <code>Screen</code> and <code>Graphics</code> functions</p> <p>Creates a Color</p>"},{"location":"types/Color/#colorgetr","title":"Color.getR","text":"<pre><code>function Color.getR(Color)\n</code></pre>"},{"location":"types/Color/#colorgetg","title":"Color.getG","text":"<pre><code>function Color.getG(Color)\n</code></pre>"},{"location":"types/Color/#colorgetb","title":"Color.getB","text":"<pre><code>function Color.getB(Color)\n</code></pre>"},{"location":"types/Color/#colorgeta","title":"Color.getA","text":"<pre><code>function Color.getA(Color)\n</code></pre>"},{"location":"types/Filter/","title":"enum Filter","text":""},{"location":"types/Font/","title":"class Font","text":""},{"location":"types/Font/#methods","title":"methods","text":""},{"location":"types/Font/#fontftinit","title":"Font.ftInit","text":"<pre><code>function Font.ftInit()\n</code></pre> <p>Initializes the TTF Fonts system</p>"},{"location":"types/Font/#fontftload","title":"Font.ftLoad","text":"<pre><code>function Font.ftLoad(path: string) -&gt; fonthandle ttf\n</code></pre> <p>@param <code>path</code> - path to file</p> <p>@return <code>fonthandle</code> - ttf font internal ID. see ttf</p> <p>Loads a TTF font from a file</p>"},{"location":"types/Font/#fontftsetpixelsize","title":"Font.ftSetPixelSize","text":"<pre><code>function Font.ftSetPixelSize(\n  font: ttf,\n  width: integer,\n  height: integer\n)\n</code></pre> <p>@param <code>font</code> - font handle</p> <p>Changes font pixel size</p>"},{"location":"types/Font/#fontftsetcharsize","title":"Font.ftSetCharSize","text":"<pre><code>function Font.ftSetCharSize(\n  font: ttf,\n  width: integer,\n  height: integer\n)\n</code></pre> <p>@param <code>font</code> - font handle</p> <p>Changes font char size</p>"},{"location":"types/Font/#fontftprint","title":"Font.ftPrint","text":"<pre><code>function Font.ftPrint(\n  font: ttf,\n  x: integer,\n  y: integer,\n  fontalign: fontalign,\n  width: integer,\n  height: integer,\n  text: string,\n  color: color\n)\n</code></pre> <p>@param <code>font</code> - font handle</p> <p>@param <code>x</code> - X coordinate</p> <p>@param <code>y</code> - Y coordinate</p> <p>@param <code>fontalign</code> - alignment commands for text</p> <p>@param <code>width</code> - defines width  of draw area, text that goes beyond this area is not drawn</p> <p>@param <code>height</code> - defines height of draw area, text that goes beyond this area is not drawn</p> <p>@param <code>text</code> - the text to be written</p> <p>@param <code>color</code> - [Optional]: if not specified default is RGBA #80808080</p> <p>Prints text with a font</p> <p>@see Color.new</p>"},{"location":"types/Font/#fontftunload","title":"Font.ftUnload","text":"<pre><code>function Font.ftUnload(font: ttf)\n</code></pre> <p>@param <code>font</code> - font handle</p> <p>Unloads a font from RAM</p>"},{"location":"types/Font/#fontftend","title":"Font.ftEnd","text":"<pre><code>function Font.ftEnd()\n</code></pre> <p>DeInitializes the TTF Fonts system</p>"},{"location":"types/Font/#fontload","title":"Font.load","text":"<pre><code>function Font.load(path: string) -&gt; fonthandle gsfont\n</code></pre> <p>@param <code>path</code> - path to font</p> <p>Loads a GSFONT from FNT, PNG or BMP files</p>"},{"location":"types/Font/#fontprint","title":"Font.print","text":"<pre><code>function Font.print(\n  font: gsfont,\n  x: number,\n  y: number,\n  scale: number,\n  text: string,\n  color: color\n)\n</code></pre> <p>@param <code>font</code> - GSFONT handle</p> <p>@param <code>x</code> - X coordinate</p> <p>@param <code>y</code> - Y coordinate</p> <p>@param <code>scale</code> - scale</p> <p>@param <code>text</code> - text to print</p> <p>@param <code>color</code> - [Optional]: if not specified default is RGBA #80808080</p> <p>Prints text with a GSFONT</p> <p>@see Font.load Color.new</p>"},{"location":"types/Font/#fontunload","title":"Font.unload","text":"<pre><code>function Font.unload(font: gsfont)\n</code></pre> <p>@param <code>font</code> - GSFONT handle</p> <p>unloads a GSFONT</p> <p>@see Font.load</p>"},{"location":"types/Font/#fontfmload","title":"Font.fmLoad","text":"<pre><code>function Font.fmLoad()\n</code></pre> <p>Loads the OSD system font <code>rom0:FONTM</code> WARNING: Some systems, like the PSX-DESR and all Arcade PS2s do not have this file as part of their bios, wich makes this function useless on such machines</p>"},{"location":"types/Font/#fontfmprint","title":"Font.fmPrint","text":"<pre><code>function Font.fmPrint(\n  x: number,\n  y: number,\n  scale: number,\n  text: string,\n  color: color\n)\n</code></pre> <p>@param <code>x</code> - X coordinate</p> <p>@param <code>y</code> - Y coordinate</p> <p>@param <code>scale</code> - scaling factor for text</p> <p>@param <code>text</code> - text to print</p> <p>@param <code>color</code> - [Optional]: if not specified default is RGBA #80808080</p> <p>Prints text with the OSD Font. you must call <code>Font.fmLoad</code> before using</p> <p>@see Color.new Font.fmLoad</p>"},{"location":"types/Font/#fontfmunload","title":"Font.fmUnload","text":"<pre><code>function Font.fmUnload()\n</code></pre> <p>unloads the OSD Font from RAM</p> <p>@see Font.fmLoad</p>"},{"location":"types/Graphics/","title":"class Graphics","text":""},{"location":"types/Graphics/#methods","title":"methods","text":""},{"location":"types/Graphics/#graphicsdrawpixel","title":"Graphics.drawPixel","text":"<pre><code>function Graphics.drawPixel(\n  X: integer,\n  Y: integer,\n  color: color\n)\n</code></pre> <p>@param <code>X</code> - X coordinate</p> <p>@param <code>Y</code> - Y coordinate</p> <p>@param <code>color</code> - the color of the pixel</p> <p>Changes the color of a specific pixel</p> <p>@see color</p>"},{"location":"types/Graphics/#graphicsdrawrect","title":"Graphics.drawRect","text":"<pre><code>function Graphics.drawRect(\n  X: integer,\n  Y: integer,\n  width: integer,\n  height: integer,\n  color: color\n)\n</code></pre> <p>@param <code>X</code> - X coordinate for top left corner of the rectangle</p> <p>@param <code>Y</code> - Y coordinate for top left corner of the rectangle</p> <p>@param <code>width</code> - rectangle width</p> <p>@param <code>height</code> - rectangle height</p> <p>@param <code>color</code> - the color of the rectangle</p>"},{"location":"types/Graphics/#graphicsdrawline","title":"Graphics.drawLine","text":"<pre><code>function Graphics.drawLine(\n  X: integer,\n  Y: integer,\n  X2: integer,\n  Y2: integer,\n  color: color\n)\n</code></pre> <p>@param <code>X</code> - X coordinate for begining of line</p> <p>@param <code>Y</code> - Y coordinate for begining of line</p> <p>@param <code>X2</code> - X coordinate for end of the line</p> <p>@param <code>Y2</code> - Y coordinate for end of the line</p> <p>@param <code>color</code> - the color of the line</p>"},{"location":"types/Graphics/#graphicsdrawcircle","title":"Graphics.drawCircle","text":"<pre><code>function Graphics.drawCircle(\n  X: integer,\n  Y: integer,\n  radius: integer,\n  color: color,\n  fill: integer\n)\n</code></pre> <p>@param <code>X</code> - X coordinate for circle center</p> <p>@param <code>Y</code> - Y coordinate for circle center</p> <p>@param <code>radius</code> - circle radius</p> <p>@param <code>color</code> - circle color</p> <p>@param <code>fill</code> - 1:draw a filled circle, 0:draw only the perimeter of the circle. Optional parameter: 0 is the default</p>"},{"location":"types/Graphics/#graphicsdrawtriangle","title":"Graphics.drawTriangle","text":"<pre><code>function Graphics.drawTriangle(\n  x: number,\n  y: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  color: color\n)\n</code></pre> <p>@param <code>x</code> - Coordinates for first  vertice</p> <p>@param <code>y</code> - Coordinates for first  vertice</p> <p>@param <code>x2</code> - Coordinates for second vertice</p> <p>@param <code>y2</code> - Coordinates for second vertice</p> <p>@param <code>x3</code> - Coordinates for third  vertice</p> <p>@param <code>y3</code> - Coordinates for third  vertice</p>"},{"location":"types/Graphics/#graphicsdrawquad","title":"Graphics.drawQuad","text":"<pre><code>function Graphics.drawQuad(\n  x: number,\n  y: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  color: color\n)\n</code></pre> <p>@param <code>x</code> - coordinates for first  corner</p> <p>@param <code>y</code> - coordinates for first  corner</p> <p>@param <code>x2</code> - coordinates for second corner</p> <p>@param <code>y2</code> - coordinates for second corner</p> <p>@param <code>x3</code> - coordinates for third  corner</p> <p>@param <code>y3</code> - coordinates for third  corner</p> <p>@param <code>x4</code> - coordinates for fourth corner</p> <p>@param <code>y4</code> - coordinates for fourth corner</p>"},{"location":"types/Graphics/#graphicsdrawquad_1","title":"Graphics.drawQuad","text":"<pre><code>function Graphics.drawQuad(\n  x: number,\n  y: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  color: color,\n  color2: color,\n  color3: color,\n  color4: color\n)\n</code></pre> <p>@param <code>x</code> - coordinates for first  corner</p> <p>@param <code>y</code> - coordinates for first  corner</p> <p>@param <code>x2</code> - coordinates for second corner</p> <p>@param <code>y2</code> - coordinates for second corner</p> <p>@param <code>x3</code> - coordinates for third  corner</p> <p>@param <code>y3</code> - coordinates for third  corner</p> <p>@param <code>x4</code> - coordinates for fourth corner</p> <p>@param <code>y4</code> - coordinates for fourth corner</p>"},{"location":"types/Graphics/#graphicsloadimage","title":"Graphics.loadImage","text":"<pre><code>function Graphics.loadImage(\n  path: string,\n  delayed: boolean\n) -&gt; texture Texture?\n</code></pre> <p>@param <code>path</code> - location of the image to load</p> <p>@param <code>delayed</code> - Whether the texture manager will be used or not. Optional Param: true by default</p> <p>Loads a PNG/JPG/BMP image from a file</p>"},{"location":"types/Graphics/#graphicsthreadloadimage","title":"Graphics.threadLoadImage","text":"<pre><code>function Graphics.threadLoadImage(\n  path: string,\n  delayed: boolean\n)\n</code></pre> <p>@param <code>path</code> - location of the image to load</p> <p>@param <code>delayed</code> - Whether the texture manager will be used or not. Optional Param: true by default</p> <p>Threaded version of Graphics.loadImage</p> <p>@see Graphics.loadImage</p>"},{"location":"types/Graphics/#graphicsgetloadstate","title":"Graphics.getLoadState","text":"<pre><code>function Graphics.getLoadState() -&gt; stat integer\n</code></pre> <p>@return <code>stat</code> - status of the threaded image load return values can be: - <code>-2</code>: no thread running, no texture avaiable for pickup - <code>-1</code>: error creating thread - <code>0</code>: thread running - <code>1</code>: thread finished, texture avaiable for pickup with <code>getLoadData</code> - <code>2</code>: thread finished, failed to load texture</p> <p>@see Graphics.threadLoadImage Graphics.getLoadData</p>"},{"location":"types/Graphics/#graphicsgetloaddata","title":"Graphics.getLoadData","text":"<pre><code>function Graphics.getLoadData() -&gt; texture Texture?\n</code></pre> <p>@return <code>texture</code> - texture loaded by threadLoadImage. returns nil if there is no instance of threadLoadImage running</p> <p>@see Graphics.threadLoadImage Graphics.getLoadState</p>"},{"location":"types/Graphics/#graphicsdrawimage","title":"Graphics.drawImage","text":"<pre><code>function Graphics.drawImage(\n  image: Texture,\n  X: integer,\n  Y: integer,\n  color: color\n)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>@param <code>X</code> - the X coordinates for the top left corner of the image</p> <p>@param <code>Y</code> - the Y coordinates for the top left corner of the image</p> <p>@param <code>color</code> - [Optional]: if not specified default is RGBA #80808080</p> <p>Draws an image on screen with it's original size</p>"},{"location":"types/Graphics/#graphicsdrawrotateimage","title":"Graphics.drawRotateImage","text":"<pre><code>function Graphics.drawRotateImage(\n  image: Texture,\n  X: integer,\n  Y: integer,\n  angle: integer,\n  color: color\n)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>@param <code>X</code> - the X coordinates for the top left corner of the image</p> <p>@param <code>Y</code> - the Y coordinates for the top left corner of the image</p> <p>@param <code>angle</code> - Angle of rotation</p> <p>@param <code>color</code> - A color created by Color.new. [Optional Parameter]</p> <p>Draws an image on screen with it's original size and a rotation angle</p>"},{"location":"types/Graphics/#graphicsdrawscaleimage","title":"Graphics.drawScaleImage","text":"<pre><code>function Graphics.drawScaleImage(\n  image: Texture,\n  X: integer,\n  Y: integer,\n  scale_x: integer,\n  scale_y: integer,\n  color: color\n)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>@param <code>X</code> - the X coordinates for the top left corner of the image</p> <p>@param <code>Y</code> - the Y coordinates for the top left corner of the image</p> <p>@param <code>scale_x</code> - width of the draw space for the image</p> <p>@param <code>scale_y</code> - height of the draw space for the image</p> <p>@param <code>color</code> - A color created by Color.new. [Optional Parameter]</p> <p>Draws an image with a specified width and height</p>"},{"location":"types/Graphics/#graphicsdrawpartialimage","title":"Graphics.drawPartialImage","text":"<pre><code>function Graphics.drawPartialImage(\n  image: Texture,\n  X: integer,\n  Y: integer,\n  start_x: integer,\n  start_y: integer,\n  width: integer,\n  height: integer,\n  color: color\n)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>@param <code>X</code> - the X coordinates for the top left corner of the image</p> <p>@param <code>Y</code> - the Y coordinates for the top left corner of the image</p> <p>@param <code>start_x</code> - coordinates for the portion of the image you want to display (top left corner)</p> <p>@param <code>start_y</code> - coordinates for the portion of the image you want to display (top left corner)</p> <p>@param <code>width</code> - width  of the desired portion to be drawn</p> <p>@param <code>height</code> - height of the desired portion to be drawn</p> <p>@param <code>color</code> - A color created by Color.new. [Optional Parameter]</p> <p>Draws a portion of an image</p>"},{"location":"types/Graphics/#graphicsdrawimageextended","title":"Graphics.drawImageExtended","text":"<pre><code>function Graphics.drawImageExtended(\n  image: Texture,\n  X: integer,\n  Y: integer,\n  start_x: integer,\n  start_y: integer,\n  width: integer,\n  height: integer,\n  scale_x: integer,\n  scale_y: integer,\n  angle: integer,\n  color: color\n)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>@param <code>X</code> - the X coordinates for the top left corner of the image</p> <p>@param <code>Y</code> - the Y coordinates for the top left corner of the image</p> <p>@param <code>start_x</code> - coordinates for the portion of the image you want to display (top left corner)</p> <p>@param <code>start_y</code> - coordinates for the portion of the image you want to display (top left corner)</p> <p>@param <code>width</code> - width  of the desired portion to be drawn</p> <p>@param <code>height</code> - height of the desired portion to be drawn</p> <p>@param <code>scale_x</code> - width of the draw space for the image</p> <p>@param <code>scale_y</code> - height of the draw space for the image</p> <p>@param <code>angle</code> - Angle of rotation</p> <p>@param <code>color</code> - A color created by Color.new. [Optional Parameter]</p> <p>extended image drawing</p>"},{"location":"types/Graphics/#graphicssetimagefilters","title":"Graphics.setImageFilters","text":"<pre><code>function Graphics.setImageFilters(\n  image: Texture,\n  filter: Filter\n)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>@param <code>filter</code> - wich filter mode to use. <code>NEAREST</code> is the default value upon loading a texture</p> <p>Changes the filtering mode of the specified texture</p> <p>@see Filter</p>"},{"location":"types/Graphics/#graphicsgetimagewidth","title":"Graphics.getImageWidth","text":"<pre><code>function Graphics.getImageWidth(image: Texture) -&gt; width integer\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>Obtains the width of this texture</p>"},{"location":"types/Graphics/#graphicsgetimageheight","title":"Graphics.getImageHeight","text":"<pre><code>function Graphics.getImageHeight(image: Texture) -&gt; Height integer\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>Obtains the Height of this texture</p>"},{"location":"types/Graphics/#graphicsfreeimage","title":"Graphics.freeImage","text":"<pre><code>function Graphics.freeImage(image: Texture)\n</code></pre> <p>@param <code>image</code> - The image texture</p> <p>destroys the texture and frees the allocated buffer where it was stored</p>"},{"location":"types/IOP/","title":"class IOP","text":""},{"location":"types/IOP/#methods","title":"methods","text":""},{"location":"types/IOP/#ioploadmodule","title":"IOP.loadModule","text":"<pre><code>function IOP.loadModule(\n  path: string,\n  argc: integer,\n  argv: string\n)\n -&gt; ID integer\n -&gt; RET integer\n\n</code></pre> <p>@param <code>path</code> - path to the IRX file</p> <p>@param <code>argc</code> - lenght to the argv variable (use <code>string.len(argv)</code> ideally)</p> <p>@param <code>argv</code> - null delimited list of arguments <code>argv[1]\\0argv[2]\\0argv[3]</code></p> <p>@return <code>ID</code> - The assigned ID number to this IRX driver. if an error ocurred, modload will return a negative number: https://github.com/ps2dev/ps2sdk/blob/master/iop/kernel/include/kerr.h</p> <p>@return <code>RET</code> - The return value of the IRX driver, usually: 0 means driver remains resident on the IOP, and 1 means the driver requested to be unloaded  NOTE: if (ID&lt;0) then RET will not have a return value, because the IRX did not run</p> <p>Uploads and executes an IRX driver from a file into the I/O Processor</p>"},{"location":"types/IOP/#ioploadmodulebuffer","title":"IOP.loadModuleBuffer","text":"<pre><code>function IOP.loadModuleBuffer(\n  ptr: string,\n  ptrsize: integer,\n  argc: integer,\n  argv: string\n)\n -&gt; ID integer\n -&gt; RET integer\n\n</code></pre> <p>@param <code>ptr</code> - buffer containing the IRX driver</p> <p>@param <code>ptrsize</code> - size of the buffer containing the IRX driver</p> <p>@param <code>argc</code> - length to the argv variable (use <code>string.len(argv)</code> ideally)</p> <p>@param <code>argv</code> - null delimited list of arguments <code>argv[1]\\0argv[2]\\0argv[3]</code></p> <p>@return <code>ID</code> - The assigned ID number to this IRX driver. if an error ocurred, modload will return a negative number: https://github.com/ps2dev/ps2sdk/blob/master/iop/kernel/include/kerr.h</p> <p>@return <code>RET</code> - The return value of the IRX driver, usually: 0 means driver remains resident on the IOP, and 1 means the driver requested to be unloaded  NOTE: if (ID&lt;0) then RET will not have a return value, because the IRX did not run</p> <p>Uploads and executes an IRX driver from a buffer into the I/O Processor</p>"},{"location":"types/Lights/","title":"class Lights","text":""},{"location":"types/Lights/#methods","title":"methods","text":""},{"location":"types/Lights/#lightsset","title":"Lights.set","text":"<pre><code>function Lights.set(\n  id: integer,\n  dir_x: number,\n  dir_y: number,\n  dir_z: number,\n  r: number,\n  g: number,\n  b: number,\n  type: lightmode\n)\n</code></pre>"},{"location":"types/Lights/#lightscreate","title":"Lights.create","text":"<pre><code>function Lights.create(count: integer)\n</code></pre> <p>@param <code>count</code> - the ammount of lights</p>"},{"location":"types/Pads/","title":"class Pads","text":""},{"location":"types/Pads/#methods","title":"methods","text":""},{"location":"types/Pads/#padsget","title":"Pads.get","text":"<pre><code>function Pads.get(port: integer) -&gt; ret integer\n</code></pre> <p>@param <code>port</code> - which port to check</p> <p>@return <code>ret</code> - currently pressed buttons</p> <p>Gets the currently pressed buttons for a specific port</p> <p>@see Pads.check</p>"},{"location":"types/Pads/#padsgetleftstick","title":"Pads.getLeftStick","text":"<pre><code>function Pads.getLeftStick()\n -&gt; X integer\n -&gt; Y integer\n\n</code></pre> <p>@return <code>X</code> - the X axis value</p> <p>@return <code>Y</code> - the Y axis value if no parameter passed, port 0 is assumed</p> <p>gets the position of the left stick as coordinates</p>"},{"location":"types/Pads/#padsgetrightstick","title":"Pads.getRightStick","text":"<pre><code>function Pads.getRightStick()\n -&gt; X integer\n -&gt; Y integer\n\n</code></pre> <p>@return <code>X</code> - the X axis value</p> <p>@return <code>Y</code> - the Y axis value if no parameter passed, port 0 is assumed</p> <p>gets the position of the Right stick as coordinates</p>"},{"location":"types/Pads/#padsgettype","title":"Pads.getType","text":"<pre><code>function Pads.getType(port: integer) -&gt; T padtypes\n</code></pre> <p>@param <code>port</code> - which port to check</p> <p>gets what kind of controller is plugged into this port</p> <p>@see padtypes</p>"},{"location":"types/Pads/#padsgetpressure","title":"Pads.getPressure","text":"<pre><code>function Pads.getPressure(\n  port: integer,\n  pad: padbuttons\n) -&gt; pressure integer\n</code></pre> <p>@param <code>port</code> - which port to check</p> <p>@param <code>pad</code> - wich button to check the pressure</p> <p>Checks the pressure at which a specific button is being pressed</p>"},{"location":"types/Pads/#padsrumble","title":"Pads.rumble","text":"<pre><code>function Pads.rumble(\n  port: integer,\n  big: integer,\n  small: integer\n)\n</code></pre> <p>@param <code>port</code> - which port to check</p> <p>@param <code>big</code> - big rumble control</p> <p>@param <code>small</code> - small rumble control if not specifying port, port 0 is assumed</p> <p>control joystick rumble</p>"},{"location":"types/Pads/#padssetled","title":"Pads.setLED","text":"<pre><code>function Pads.setLED(\n  port: integer,\n  R: integer,\n  G: integer,\n  B: integer\n)\n</code></pre> <p>@param <code>port</code> - which USB port to check: (SLIM: left port is 0, FAT: top port is 0)</p> <p>@param <code>R</code> - RED color,   any value between 0-255</p> <p>@param <code>G</code> - GREEN color, any value between 0-255</p> <p>@param <code>B</code> - BLUE color,  any value between 0-255</p> <p>Attempts to change the led color of a PS4 controller if not specifying port, port 0 is assumed</p>"},{"location":"types/Pads/#padscheck","title":"Pads.check","text":"<pre><code>function Pads.check(\n  port: integer,\n  pad: padbuttons\n)\n</code></pre> <p>@param <code>port</code> - which port to check</p> <p>@param <code>pad</code> - wich buttons to check, you can combine with like this: <code>PAD_START|PAD_R1</code></p> <p>checks if the following button(s) is/are pressed</p>"},{"location":"types/Render/","title":"class Render","text":""},{"location":"types/Render/#methods","title":"methods","text":""},{"location":"types/Render/#renderinit","title":"Render.init","text":"<pre><code>function Render.init(aspect: integer)\n</code></pre> <p>@param <code>aspect</code> - the aspect ratio. pass either <code>4/3</code> or <code>16/9</code></p> <p>Initialize 3d rendering</p>"},{"location":"types/Render/#renderloadobj","title":"Render.loadOBJ","text":"<pre><code>function Render.loadOBJ(\n  model: string,\n  texture: Texture\n) -&gt; model Model\n</code></pre> <p>@param <code>model</code> - path to .OBJ file</p> <p>@param <code>texture</code> - Texture object from <code>Graphics.loadImage</code></p> <p>Loads a wavefront OBJ</p> <p>@see Graphics.loadImage</p>"},{"location":"types/Render/#renderdrawobj","title":"Render.drawOBJ","text":"<pre><code>function Render.drawOBJ(\n  model: Model,\n  pos_x: integer,\n  pos_y: integer,\n  pos_z: integer,\n  rot_x: integer,\n  rot_y: integer,\n  rot_z: integer\n)\n</code></pre> <p>@param <code>pos_x</code> - Coordinate for the X axis</p> <p>@param <code>pos_y</code> - Coordinate for the Y axis</p> <p>@param <code>pos_z</code> - Coordinate for the Z axis</p> <p>@param <code>rot_x</code> - Rotation   for the X axis</p> <p>@param <code>rot_y</code> - Rotation   for the Y axis</p> <p>@param <code>rot_z</code> - Rotation   for the Z axis</p> <p>Draws the 3d model</p>"},{"location":"types/Render/#renderdrawbbox","title":"Render.drawBbox","text":"<pre><code>function Render.drawBbox(\n  model: Model,\n  pos_x: integer,\n  pos_y: integer,\n  pos_z: integer,\n  rot_x: integer,\n  rot_y: integer,\n  rot_z: integer,\n  color: color\n)\n</code></pre> <p>@param <code>pos_x</code> - Coordinate for the X axis</p> <p>@param <code>pos_y</code> - Coordinate for the Y axis</p> <p>@param <code>pos_z</code> - Coordinate for the Z axis</p> <p>@param <code>rot_x</code> - Rotation   for the X axis</p> <p>@param <code>rot_y</code> - Rotation   for the Y axis</p> <p>@param <code>rot_z</code> - Rotation   for the Z axis</p> <p>@param <code>color</code> - color</p> <p>Draws the 3d model</p> <p>@see Color.new</p>"},{"location":"types/Render/#renderfreeobj","title":"Render.freeOBJ","text":"<pre><code>function Render.freeOBJ(model: Model)\n</code></pre> <p>Frees the 3D model, just in case it's not obvious: the texture is not freed</p>"},{"location":"types/Screen/","title":"class Screen","text":""},{"location":"types/Screen/#methods","title":"methods","text":""},{"location":"types/Screen/#screensetmode","title":"Screen.setMode","text":"<pre><code>function Screen.setMode(\n  mode: VideoMode,\n  width: integer,\n  height: integer,\n  colormode: ColorMode,\n  interlace: Interlace,\n  field: Field,\n  zbuffering: boolean,\n  zbuf_colormode: ColorModeZbuffer\n)\n</code></pre> <p>@param <code>mode</code> - video mode to be used, if not sure, chose PAL or NTSC depending on console region</p> <p>@param <code>width</code> - width  of the image buffer</p> <p>@param <code>height</code> - height of the image buffer</p> <p>Changes the Screen mode, the last two params are optional, dont use them unless interested in 3D</p> <p>@see VideoMode ColorMode Interlace Field ColorModeZbuffer</p>"},{"location":"types/Screen/#screengetmode","title":"Screen.getMode","text":"<pre><code>function Screen.getMode() -&gt; MODE table\n</code></pre> <p>returns a lua table containing the current video configuration</p> <p>the table contains the following elements, all of them integer - mode - interlace - field - dithering - doubleBuffering - zBuffering - width - height - aspect - colorMode - zColorMode</p>"},{"location":"types/Screen/#screenclear","title":"Screen.clear","text":"<pre><code>function Screen.clear(color: color)\n</code></pre> <p>@param <code>color</code> - [optional]: if no parameter is passed, black is assumed</p> <p>Clears the screen</p>"},{"location":"types/Screen/#screenflip","title":"Screen.flip","text":"<pre><code>function Screen.flip()\n</code></pre> <p>Flip Screen</p>"},{"location":"types/Screen/#screengetfreevram","title":"Screen.getFreeVRAM","text":"<pre><code>function Screen.getFreeVRAM() -&gt; freeVRAM integer\n</code></pre> <p>returns the ammount of free ram in bytes</p>"},{"location":"types/Screen/#screenwaitvblankstart","title":"Screen.waitVblankStart","text":"<pre><code>function Screen.waitVblankStart()\n</code></pre>"},{"location":"types/Screen/#screengetfps","title":"Screen.getFPS","text":"<pre><code>function Screen.getFPS(c: integer)\n</code></pre>"},{"location":"types/System/","title":"class System","text":""},{"location":"types/System/#methods","title":"methods","text":""},{"location":"types/System/#systemgetfps","title":"System.getFPS","text":"<pre><code>function System.getFPS(\n  prev,\n  cur\n)\n</code></pre> <p>@deprecated Deprecated</p> <p>@see Screen.getFPS</p>"},{"location":"types/System/#systemopenfile","title":"System.openFile","text":"<pre><code>function System.openFile(\n  path: string,\n  openmode: integer\n) -&gt; fd integer\n</code></pre> <p>@param <code>path</code> - path to file</p> <p>@param <code>openmode</code> - can be a combination of the following: <code>O_RDONLY</code>, <code>O_WRONLY</code>, <code>O_CREAT</code>, <code>O_TRUNC</code>, <code>O_RDWR</code></p> <p>@return <code>fd</code> - file descriptor number or negative number on error</p> <p>Opens file for further operations</p>"},{"location":"types/System/#systemreadfile","title":"System.readFile","text":"<pre><code>function System.readFile(\n  fd: integer,\n  lenght: integer\n)\n -&gt; buf string\n -&gt; lenght integer\n\n</code></pre> <p>@param <code>fd</code> - the file descriptor</p> <p>@param <code>lenght</code> - size in bytes to be read from the file</p> <p>@return <code>buf</code> - a string containing the readed data</p> <p>@return <code>lenght</code> - ammount of bytes read from the file</p> <p>reads data from an already opened file</p> <p>@see System.openFile</p>"},{"location":"types/System/#systemwritefile","title":"System.writeFile","text":"<pre><code>function System.writeFile(\n  fd: integer,\n  buf: string,\n  lenght: integer\n) -&gt; lenght integer\n</code></pre> <p>@param <code>fd</code> - the file descriptor</p> <p>@param <code>buf</code> - buffer of data to be written</p> <p>@param <code>lenght</code> - the ammount of bytes to be written (should always be smaller or equal to the lenght of the buf)</p> <p>@return <code>lenght</code> - ammount of bytes written the file</p> <p>reads data from an already opened file</p> <p>@see System.openFile</p>"},{"location":"types/System/#systemclosefile","title":"System.closeFile","text":"<pre><code>function System.closeFile(fd: integer) -&gt; r integer\n</code></pre> <p>@param <code>fd</code> - the file descriptor to be closed</p> <p>@return <code>r</code> - 0 on success</p> <p>reads data from an already opened file</p> <p>@see System.openFile</p>"},{"location":"types/System/#systemseekfile","title":"System.seekFile","text":"<pre><code>function System.seekFile(\n  fd: integer,\n  pos: seektypes,\n  type\n) -&gt; newpos integer\n</code></pre> <p>@param <code>fd</code> - the file descriptor</p> <p>@param <code>pos</code> - the position to be used</p> <p>@return <code>newpos</code> - the new position on the file, counting in bytes from file begining</p> <p>reads data from an already opened file</p> <p>@see System.openFile seektypes</p>"},{"location":"types/System/#systemsizefile","title":"System.sizeFile","text":"<pre><code>function System.sizeFile(fd: integer) -&gt; size integer\n</code></pre> <p>@param <code>fd</code> - the file descriptor</p> <p>@return <code>size</code> - size of file in bytes, or negative number on error</p> <p>simple wrapper to quickly obtain size of file in bytes</p>"},{"location":"types/System/#systemcurrentdirectory","title":"System.currentDirectory","text":"<pre><code>function System.currentDirectory(path: string)\n</code></pre> <p>@param <code>path</code> - when passed a string, that string is used as the new Current Working Directory of the program, pass no parameters or <code>nil</code> to make the function return the current working directory</p> <p>returns or sets the current directory depending on the parameter passed</p>"},{"location":"types/System/#systemlistdirectory","title":"System.listDirectory","text":"<pre><code>function System.listDirectory(path: string) -&gt; dirent luadirent {\n    name = string,\n    size = integer,\n    directory = boolean,\n}\n</code></pre> <p>@param <code>path</code> - the path that the function must scan, if no path passed, then the CWD is used instead</p> <p>@return <code>dirent</code> - an array of tables with the directory contents</p> <p>iterates over the contents of a directory and returns a table listing it's contents</p> <p>@see luadirent: the array of tables returned structure</p>"},{"location":"types/System/#systemcreatedirectory","title":"System.createDirectory","text":"<pre><code>function System.createDirectory(path: string) -&gt; ret integer\n</code></pre> <p>@param <code>path</code> - the path to the directory to be created</p> <p>@return <code>ret</code> - operation result. 0 for success</p> <p>attempts to create a directory at the specified path</p>"},{"location":"types/System/#systemremovedirectory","title":"System.removeDirectory","text":"<pre><code>function System.removeDirectory(path: string) -&gt; ret integer\n</code></pre> <p>@param <code>path</code> - the path to the directory to be removed</p> <p>@return <code>ret</code> - operation result. 0 for success</p> <p>attempts to remove a directory at the specified path</p>"},{"location":"types/System/#systemcopyfile","title":"System.copyFile","text":"<pre><code>function System.copyFile(\n  file: string,\n  newfile: string\n)\n</code></pre> <p>@param <code>file</code> - the path to the original file</p> <p>@param <code>newfile</code> - the path to the new file WARNING: this function does not perform any kind of error handling nor error return</p> <p>simplified wrapper for copying of one file into another location</p>"},{"location":"types/System/#systemmovefile","title":"System.moveFile","text":"<pre><code>function System.moveFile(\n  file: string,\n  newfile: string\n)\n</code></pre> <p>@param <code>file</code> - the path to the original file</p> <p>@param <code>newfile</code> - the path to the new file WARNING: this function does not perform any kind of error handling nor error return</p> <p>simplified wrapper for moving one file into another location</p>"},{"location":"types/System/#systemthreadcopyfile","title":"System.threadCopyFile","text":"<pre><code>function System.threadCopyFile(\n  file: string,\n  newfile: string\n)\n</code></pre> <p>@param <code>file</code> - the path to the original file</p> <p>@param <code>newfile</code> - the path to the new file WARNING: this function does not perform any kind of error handling nor error return</p> <p>threaded version of <code>System.copyFile</code></p>"},{"location":"types/System/#systemgetfileprogress","title":"System.getFileProgress","text":"<pre><code>function System.getFileProgress() -&gt; progress cpprog {\n    current = integer,\n    final = integer,\n}\n</code></pre> <p>threaded version of <code>System.copyFile</code></p> <p>@see cpprog</p>"},{"location":"types/System/#systemremovefile","title":"System.removeFile","text":"<pre><code>function System.removeFile(file: string) -&gt; ret integer\n</code></pre> <p>@param <code>file</code> - the path for the file to be deleted</p> <p>@return <code>ret</code> - 0 on success</p> <p>attempts to remove a file</p>"},{"location":"types/System/#systemrename","title":"System.rename","text":"<pre><code>function System.rename(\n  source,\n  dest\n)\n</code></pre> <p>internally it is the same than <code>System.moveFile</code>. use that instead</p> <p>@deprecated Deprecated</p> <p>@see System.moveFile System.moveFile</p>"},{"location":"types/System/#systemmd5sum","title":"System.md5sum","text":"<pre><code>function System.md5sum(data: string) -&gt; md5 string\n</code></pre> <p>@param <code>data</code> - the data to obtain the checksum from</p> <p>@return <code>md5</code> - the string representation of the obtained checksum</p> <p>Calculates MD5 checksum for a string (or data buffer)</p>"},{"location":"types/System/#systemmd5sum_1","title":"System.md5sum","text":"<pre><code>function System.md5sum(sec: integer)\n</code></pre> <p>@param <code>sec</code> - how many seconds to wait</p> <p>Same then C <code>sleep()</code>. waits for the specified ammount of seconds</p>"},{"location":"types/System/#systemgetfreememory","title":"System.getFreeMemory","text":"<pre><code>function System.getFreeMemory() -&gt; freebytes integer\n</code></pre> <p>@return <code>freebytes</code> - ammount of of free RAM on the Emotion Engine. expressed as bytes Total RAM: - Retail PS2: <code>32</code>mb - System246/Konami Python1: <code>32</code>mb - PSX DESR and System256: <code>64</code>mb - PS2 DTL-T TOOL units: <code>128</code>mb</p>"},{"location":"types/System/#systemexittobrowser","title":"System.exitToBrowser","text":"<pre><code>function System.exitToBrowser()\n</code></pre> <p>Executes the system OSDSYS abruptly</p>"},{"location":"types/System/#systemgetmcinfo","title":"System.getMCInfo","text":"<pre><code>function System.getMCInfo(port: integer) -&gt; mcinfo mcinfo {\n    type = mctypes,\n    freemem = integer,\n    format = mcformat,\n    result = integer,\n}\n</code></pre> <p>@param <code>port</code> - The memory card port to obtain information. defaults to 0 if no param passed</p> <p>Obtains information about a memory card connected</p> <p>@see mcinfo</p>"},{"location":"types/System/#systemloadelf","title":"System.loadELF","text":"<pre><code>function System.loadELF(\n  path: string,\n  reboot_iop: (boolean|integer),\n  ...: string\n)\n</code></pre> <p>@param <code>path</code> - the location of the ELF file to be executed</p> <p>@param <code>reboot_iop</code> - if the I/O Processor should be rebooted before firing the ELF</p> <p>@param <code>...</code> - argumments for the ELF file. path is assigned as argv[0]</p> <p>Executes an ELF file</p>"},{"location":"types/System/#systemcheckvaliddisc","title":"System.checkValidDisc","text":"<pre><code>function System.checkValidDisc() -&gt;  integer\n</code></pre> <p>@return  - 0: Valid disc | 1: Invalid disc</p> <p>Checks if a valid disc is inserted on tray</p>"},{"location":"types/System/#systemgetdisctype","title":"System.getDiscType","text":"<pre><code>function System.getDiscType() -&gt; disctypes disctypes\n</code></pre> <p>Checks what kind of disc is inserted on the system</p> <p>@see disctypes</p>"},{"location":"types/System/#systemcheckdisctray","title":"System.checkDiscTray","text":"<pre><code>function System.checkDiscTray() -&gt; status integer\n</code></pre> <p>@return <code>status</code> - 1 if its open, 0 otherwise</p> <p>Checks if the disc tray is open</p>"},{"location":"types/Texture/","title":"alias Texture","text":"<pre><code>(alias) Texture = integer\n</code></pre>"},{"location":"types/Timer/","title":"class Timer","text":""},{"location":"types/Timer/#methods","title":"methods","text":""},{"location":"types/Timer/#timernew","title":"Timer.new","text":"<pre><code>function Timer.new() -&gt; T timer\n</code></pre> <p>Creates a new timer</p>"},{"location":"types/Timer/#timergettime","title":"Timer.getTime","text":"<pre><code>function Timer.getTime(T: timer) -&gt; R integer\n</code></pre> <p>@param <code>T</code> - the timer to use</p>"},{"location":"types/Timer/#timersettime","title":"Timer.setTime","text":"<pre><code>function Timer.setTime(\n  T: timer,\n  val: integer\n)\n</code></pre> <p>@param <code>val</code> - the new time</p>"},{"location":"types/Timer/#timerdestroy","title":"Timer.destroy","text":"<pre><code>function Timer.destroy(T: timer)\n</code></pre> <p>destroys the timer</p>"},{"location":"types/Timer/#timerpause","title":"Timer.pause","text":"<pre><code>function Timer.pause(T: timer)\n</code></pre> <p>pauses the timer</p>"},{"location":"types/Timer/#timerresume","title":"Timer.resume","text":"<pre><code>function Timer.resume(T: timer)\n</code></pre> <p>resumes the timer</p>"},{"location":"types/Timer/#timerreset","title":"Timer.reset","text":"<pre><code>function Timer.reset(T: timer)\n</code></pre> <p>resets the timer</p>"},{"location":"types/Timer/#timerisplaying","title":"Timer.isPlaying","text":"<pre><code>function Timer.isPlaying(T: timer) -&gt; playing boolean\n</code></pre> <p>@return <code>playing</code> - if the timer is playing</p> <p>Checks if timer is playing</p>"},{"location":"types/color/","title":"alias color","text":"<pre><code>(alias) color = integer\n</code></pre> <p>Color value, can be generated with Color.new()</p>"},{"location":"types/cpprog/","title":"class cpprog","text":"<p>this is the table structure returned by <code>System.getFileProgress</code></p>"},{"location":"types/cpprog/#fields","title":"fields","text":""},{"location":"types/cpprog/#cpprogcurrent","title":"cpprog.current","text":"<pre><code>cpprog.current : integer\n</code></pre> <p>ammount of bytes already copied</p>"},{"location":"types/cpprog/#cpprogfinal","title":"cpprog.final","text":"<pre><code>cpprog.final : integer\n</code></pre> <p>size of the file being copied</p>"},{"location":"types/disctypes/","title":"enum disctypes","text":""},{"location":"types/gsfont/","title":"alias gsfont","text":"<pre><code>(alias) gsfont = integer\n</code></pre> <p>Image font loaded by Font.load</p>"},{"location":"types/luadirent/","title":"class luadirent","text":""},{"location":"types/luadirent/#fields","title":"fields","text":""},{"location":"types/luadirent/#luadirentname","title":"luadirent.name","text":"<pre><code>luadirent.name : string\n</code></pre> <p>name of the entry</p>"},{"location":"types/luadirent/#luadirentsize","title":"luadirent.size","text":"<pre><code>luadirent.size : integer\n</code></pre> <p>size of the file WARNING this field may not be available in some devices, if so, the field will be <code>nil</code></p>"},{"location":"types/luadirent/#luadirentdirectory","title":"luadirent.directory","text":"<pre><code>luadirent.directory : boolean\n</code></pre> <p>indicates if this entry is a directory or a file</p>"},{"location":"types/mcinfo/","title":"class mcinfo","text":""},{"location":"types/mcinfo/#fields","title":"fields","text":""},{"location":"types/mcinfo/#mcinfotype","title":"mcinfo.type","text":"<pre><code>mcinfo.type : mctypes\n</code></pre> <p>what kind of memory card is plugged into that port</p>"},{"location":"types/mcinfo/#mcinfofreemem","title":"mcinfo.freemem","text":"<pre><code>mcinfo.freemem : integer\n</code></pre> <p>ammount of free memory on card, not always available</p>"},{"location":"types/mcinfo/#mcinfoformat","title":"mcinfo.format","text":"<pre><code>mcinfo.format : mcformat\n</code></pre> <p>if the memory card is formatted</p>"},{"location":"types/mcinfo/#mcinforesult","title":"mcinfo.result","text":"<pre><code>mcinfo.result : integer\n</code></pre> <p>the result of the C mcSync() function. for more information read here</p>"},{"location":"types/timer/","title":"alias timer","text":"<pre><code>(alias) timer = integer\n</code></pre>"},{"location":"types/ttf/","title":"alias ttf","text":"<pre><code>(alias) ttf = integer\n</code></pre> <p>A numeric ID for a TTF font loaded by Font.ftLoad</p>"}]}